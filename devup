
Problem:

IR systems in general retrieve results based on standard algorithms (TF-IDF, BM25 or cosine similarity). But these algorithms may not be the right fit when we screen then against a proper noun or a statement with proper nouns like names, addresses or ids. Also, these systems don’t give user the flexibility to change the way the system retrieves results. To tune the results according to our need we need to have an additional filter which is a redundant computation. This approach becomes tedious since there are multiple layers of tuning (no of results fetched from the IR system and changing the filter to user’s needs) making the system less deployable, configurable, and stable. There will always be a tradeoff between retrieving the required matches and performance.
 
Requirements:

Reduce the false positives, and making the search more flexible by giving user the control of how the results are retrieved.

Reduce the multiple layers of computation making the system more configurable.

Make the system idempotent so that it is pluggable to their existing components.	
 
 
Idea:

The solution can be divided into two parts. The first part to define a set of rules ,which can be configured by users, which will be  used to determine the match. These can be called Typologies. The second part will be extracting the features, using which the typologies can be evaluated. These set of features can be called Match Context.

The match context is derived by a bipartite graph matching algorithm. We construct the bipartite graph on runtime leveraging the IR system’s search. This context is derived for every potential match over which these rules can be configured

Benefit:

Since it is a pluggable component, one can use any sort of communication mechanism (synchronous, asynchronous) and create a custom architecture for search unlike the traditional systems. For e.g., Elastic search has a leader follower architecture and uses HTTP 1.0 for peer-to-peer communication.

Usually, the matching logic in general IR systems is a black box. This system shall give user the flexibility to retrieve results at their convenience. For e.g., Lexis Nexis Bridger Insight uses algorithms for matching which cannot be configured directly. Additional layers must be built to reduce the number of false positives.

Solutions as such which are already existing in the market comes with a high license cost. On top of that we cannot configure the operability of these libraries. On top of the license cost there is an additional operate cost (servers, file systems, databases etc.). Since this is an inhouse solution and also pluggable, we can have flexible operability and cost is low. This component can be used as a library which also reduce the operate cost.
 
 
Note: The solution is already under performance testing within the CLS space, Payments Tech CIB.
Project Description:
The project aims to address limitations in Information Retrieval (IR) systems by allowing users to configure retrieval rules (Typologies) and evaluate matches based on defined features (Match Context). This reduces false positives, enhances flexibility, and makes the system pluggable with existing components. By employing bipartite graph matching, it offers configurable search architecture, unlike traditional systems, at a lower cost. Tested within the CLS space, Payments Tech CIB, it promises improved operability and cost-effectiveness compared to existing solutions.
